# # version: '3.8'

# # services:
# #   frontend:
# #     build:
# #       context: ./frontend
# #     container_name: frontend
# #     environment:
# #       - NODE_ENV=production
# #     networks:
# #       - web
# #     labels:
# #       - "traefik.enable=true"
# #       - "traefik.http.routers.frontend.rule=Host(`hng11.minetest.land`)"
# #       - "traefik.http.services.frontend.loadbalancer.server.port=80"

# #   backend:
# #     build:
# #       context: ./backend
# #     container_name: backend
# #     environment:
# #       - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
# #     networks:
# #       - web
# #     labels:
# #       - "traefik.enable=true"
# #       - "traefik.http.routers.api.rule=Host(`hng11.minetest.land`) && PathPrefix(`/api`)"
# #       - "traefik.http.routers.api.service=api-service"
# #       - "traefik.http.routers.docs.rule=Host(`hng11.minetest.land`) && PathPrefix(`/docs`)"
# #       - "traefik.http.routers.docs.service=docs-service"
# #       - "traefik.http.routers.redoc.rule=Host(`hng11.minetest.land`) && PathPrefix(`/redoc`)"
# #       - "traefik.http.routers.redoc.service=redoc-service"
# #       - "traefik.http.services.api-service.loadbalancer.server.port=8000"
# #       - "traefik.http.services.docs-service.loadbalancer.server.port=8000"
# #       - "traefik.http.services.redoc-service.loadbalancer.server.port=8000"

# #   db:
# #     image: postgres:13
# #     container_name: postgres
# #     environment:
# #       POSTGRES_USER: ${POSTGRES_USER}
# #       POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
# #       POSTGRES_DB: ${POSTGRES_DB}
# #     volumes:
# #       - postgres_data:/var/lib/postgresql/data
# #     networks:
# #       - web

# #   adminer:
# #     image: adminer
# #     container_name: adminer
# #     ports:
# #       - "8080:8080"
# #     labels:
# #       - "traefik.enable=true"
# #       - "traefik.http.routers.adminer.rule=Host(`db.hng11.minetest.land`)"
# #       - "traefik.http.services.adminer.loadbalancer.server.port=8080"
# #     networks:
# #       - web

# #   traefik:
# #     image: traefik:v2.5
# #     container_name: traefik
# #     command:
# #       - "--api.insecure=true"
# #       - "--providers.docker=true"
# #       - "--entrypoints.web.address=:80"
# #       - "--entrypoints.websecure.address=:443"
# #       - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
# #       - "--certificatesresolvers.myresolver.acme.email=devmichaelalao@gmail.com"
# #       - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
# #     ports:
# #       - "80:80"
# #       - "443:443"
# #       - "8090:8080"
# #       - "81:81"
# #     volumes:
# #       - "/var/run/docker.sock:/var/run/docker.sock"
# #       - "./letsencrypt:/letsencrypt"
# #     labels:
# #       - "traefik.enable=true"
# #       - "traefik.http.routers.traefik.rule=Host(`proxy.hng11.minetest.land`)"
# #       - "traefik.http.routers.traefik.service=api@internal"
# #     networks:
# #       - web

# # volumes:
# #   postgres_data:

# # networks:
# #   web:
# #     external: false

# # version: '3.8'

# # services:
# #   frontend:
# #     build:
# #       context: ./frontend
# #     container_name: frontend
# #     restart: unless-stopped
# #     env_file:
# #       - frontend/.env
# #     ports:
# #       - "3000:3000"
# #     networks:
# #       - web

# #   backend:
# #     build:
# #       context: ./backend
# #     container_name: backend
# #     depends_on:
# #       - db
# #     restart: unless-stopped
# #     env_file:
# #       - backend/.env
# #     ports:
# #       - "8000:8000"
# #     environment:
# #       DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
# #     networks:
# #       - web

# #   db:
# #     image: postgres:13
# #     container_name: postgres
# #     restart: unless-stopped
# #     env_file:
# #       - backend/.env
# #     environment:
# #       POSTGRES_USER: ${POSTGRES_USER}
# #       POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
# #       POSTGRES_DB: ${POSTGRES_DB}
# #     volumes:
# #       - postgres_data:/var/lib/postgresql/data
# #     ports:
# #       - "5432:5432"
# #     networks:
# #       - web

# #   adminer:
# #     image: adminer
# #     container_name: adminer
# #     restart: unless-stopped
# #     ports:
# #       - "8080:8080"
# #     networks:
# #       - web

# #   proxy:
# #     image: 'jc21/nginx-proxy-manager:latest'
# #     container_name: proxy_manager
# #     restart: unless-stopped
# #     ports:
# #       - "80:80"
# #       - "81:81"
# #       - "443:443"
# #     volumes:
# #       - ./data:/data
# #       - ./proxy_manager/proxy_manager.conf:/data/proxy_manager/custom/http_top.conf
# #       - ./letsencrypt:/etc/letsencrypt
# #     depends_on:
# #       - frontend
# #       - backend
# #       - adminer
# #     networks:
# #       - web

# # volumes:
# #   postgres_data:

# # networks:
# #   web:
# #     external: false

# services:
#   frontend:
#     build:
#       context: ./frontend
#     container_name: frontend
#     restart: unless-stopped
#     env_file:
#       - frontend/.env
#     ports:
#       - "5173:5173"
#     networks:
#       - web

#   backend:
#     build:
#       context: ./backend
#     container_name: backend
#     depends_on:
#       - db
#     restart: unless-stopped
#     env_file:
#       - backend/.env
#     ports:
#       - "8000:8000"
#     environment:
#       DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
#     networks:
#       - web

#   db:
#     image: postgres:13
#     container_name: postgres
#     restart: unless-stopped
#     env_file:
#       - backend/.env
#     environment:
#       POSTGRES_USER: ${POSTGRES_USER}
#       POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#       POSTGRES_DB: ${POSTGRES_DB}
#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#     ports:
#       - "5432:5432"
#     networks:
#       - web

#   adminer:
#     image: adminer
#     container_name: adminer
#     restart: unless-stopped
#     ports:
#       - "8080:8080"
#     networks:
#       - web

#   proxy:
#     image: 'jc21/nginx-proxy-manager:latest'
#     container_name: proxy_manager
#     restart: unless-stopped
#     ports:
#       - "80:80"
#       - "81:81"
#       - "443:443"
#     environment:
#       DB_SQLITE_FILE: "/data/database.sqlite"
#     volumes:
#       - ./data:/data
#       - ./proxy_manager/proxy_manager.conf:/data/proxy_manager/custom/http_top.conf
#       - ./letsencrypt:/etc/letsencrypt
#     depends_on:
#       - frontend
#       - backend
#       - adminer
#     networks:
#       - web

# volumes:
#   postgres_data:


# networks:
#   web:
#     external: false
