version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
    container_name: frontend
    restart: unless-stopped
    env_file:
      - frontend/.env
    environment:
      VITE_API_URL: ${VITE_API_URL}
    ports:
      - "5173:5173"
    networks:
      - web

  backend:
    build:
      context: ./backend
    container_name: backend
    depends_on:
      - db
    restart: unless-stopped
    env_file:
      - backend/.env
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    networks:
      - web

  db:
    image: postgres:13
    container_name: postgres
    restart: unless-stopped
    env_file:
      - backend/.env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - web

  adminer:
    image: adminer
    container_name: adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    networks:
      - web

  proxy:
    image: 'jc21/nginx-proxy-manager:latest'
    container_name: proxy_manager
    restart: unless-stopped
    ports:
      - "80:80"
      - "81:81"
      - "443:443"
    # volumes:
    #   - ./data:/data
    #   - ./proxy_manager/proxy_manager.conf:/data/proxy_manager/custom/http_top.conf
    #   - ./letsencrypt:/etc/letsencrypt
    environment:
      DB_SQLITE_FILE: "/data/database.sqlite"
    volumes:
      - ./data:/data
      - ./letsencrypt:/etc/letsencrypt    
    depends_on:
      - frontend
      - backend
      - adminer
      - db
    networks:
      - web

volumes:
  postgres_data:
  data:
  letsencrypt:


networks:
  web:
    external: false
